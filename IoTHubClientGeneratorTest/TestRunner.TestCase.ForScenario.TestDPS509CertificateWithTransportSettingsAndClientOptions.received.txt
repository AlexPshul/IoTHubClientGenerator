********************************************************************************

namespace TestDPS509Certificate
{
    [IoTHub]
    class MyIoTHubClient
    {
        [DPS509CertificateDevice(DPSIdScope="%DpsScopeId%", Id="1", EnrollmentGroupId="GroupId", 
            EnrollmentType=DPSEnrollmentType.Individual, DPSTransportType=TransportType.Mqtt,
            CertificatePath="%certificateFilePath%", CertificatePassword="%CertPassword%")]
        private DeviceClient MyClient {get;set;}

        [TransportSetting]
        public ITransportSettings AmqpTransportSettings { get; } = new AmqpTransportSettings(TransportType.Amqp)
        {
            AmqpConnectionPoolSettings = new AmqpConnectionPoolSettings {MaxPoolSize = 5},
            IdleTimeout = TimeSpan.FromMinutes(1)
        };
        
        [ClientOptions]
        public ClientOptions ClientOptions { get; } = new();

        [TransportSetting]
        public ITransportSettings MqttTransportSetting { get; } = new MqttTransportSettings(TransportType.Mqtt)
        {
            DefaultReceiveTimeout = TimeSpan.FromMinutes(2)
        };
    }
}


********************************************************************************
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Azure.Devices.Client;
using Microsoft.Azure.Devices.Shared;
using IoTHubClientGeneratorSDK;

namespace TestDPS509Certificate
{
    public partial class MyIoTHubClient
    {
        public async Task InitIoTHubClientAsync()
        {
            await System.Threading.Tasks.Task.CompletedTask; //suppress async warning in case we don't generate any async call
            DeviceClient = CreateDeviceClient();
        }

        [Device(ConnectionString = "%ConnectionString%")]
        private DeviceClient DeviceClient
        {
            get;
            set;
        }

        private Microsoft.Azure.Devices.Client.DeviceClient CreateDeviceClient()
        {
            var theConnectionString = System.Environment.GetEnvironmentVariable("ConnectionString");
            ITransportSettings[] transportSettings = new[]{AmqpTransportSettings, MqttTransportSetting};
            var deviceClient = DeviceClient.CreateFromConnectionString(theConnectionString, transportSettings, ClientOptions);
            return deviceClient;
        }
    }
}


