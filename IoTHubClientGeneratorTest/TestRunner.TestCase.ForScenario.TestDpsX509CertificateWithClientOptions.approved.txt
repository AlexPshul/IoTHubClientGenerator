********************************************************************************

namespace TestDpsX509Certificate
{
    [IoTHub]
    class MyIoTHubClient
    {
        [DpsX509CertificateDevice(DPSIdScope="%DpsScopeId%", Id="1", EnrollmentGroupId="GroupId", 
            EnrollmentType=DPSEnrollmentType.Individual, DPSTransportType=TransportType.Amqp,TransportType=TransportType.Amqp,
            CertificatePath="%certificateFilePath%", CertificatePassword="%CertPassword%")]
        private DeviceClient MyClient {get;set;}

        [ClientOptions]
        public ClientOptions ClientOptions { get; } = new();
    }
}


********************************************************************************
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Azure.Devices.Client;
using Microsoft.Azure.Devices.Shared;
using Microsoft.Azure.Devices.Provisioning.Client.Transport;
using Microsoft.Azure.Devices.Provisioning.Security;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using IoTHubClientGeneratorSDK;

namespace TestDpsX509Certificate
{
    public partial class MyIoTHubClient
    {
        public async Task InitIoTHubClientAsync()
        {
            await System.Threading.Tasks.Task.CompletedTask; //suppress async warning in case we don't generate any async call
            MyClient = CreateMyClient();
            private Microsoft.Azure.Devices.Client.DeviceClient CreateMyClient()
            {
                var theDPSIdScope = System.Environment.GetEnvironmentVariable("DpsScopeId");
                var theId = "1";
                var theEnrollmentGroupId = "GroupId";
                var theEnrollmentType = DPSEnrollmentType.Individual;
                var theDPSTransportType = TransportType.Amqp;
                var theTransportType = TransportType.Amqp;
                var theCertificatePath = System.Environment.GetEnvironmentVariable("certificateFilePath");
                var theCertificatePassword = System.Environment.GetEnvironmentVariable("CertPassword");
                using X509Certificate2 certificate = LoadProvisioningCertificate(theCertificatePath, theCertificatePassword);
                using var security = new SecurityProviderX509Certificate(certificate);
                using var transport = new ProvisioningTransportHandlerAmqp();
                var theGlobalEndpoint = "global.azure-devices-provisioning.net";
                ProvisioningDeviceClient provClient = ProvisioningDeviceClient.Create(theGlobalDeviceEndpoint, theDPSIdScope, security, transport);
                DeviceRegistrationResult result = await provClient.RegisterAsync();
                if (result.Status != ProvisioningRegistrationStatusType.Assigned)
                {
                    throw new Exception($"Registration status did not assign a hub, status: {result.Status}");
                }

                IAuthenticationMethod auth = new DeviceAuthenticationWithX509Certificate(result.DeviceId, certificate);
                var deviceClient = DeviceClient.Create(result.AssignedHub, auth, theTransportType, ClientOptions);
                return deviceClient;
            }
        }

        private X509Certificate2 LoadProvisioningCertificate(string certificatePath, string certificatePassword)
        {
            var certificateCollection = new X509Certificate2Collection();
            certificateCollection.Import(certificatePath, certificatePassword, X509KeyStorageFlags.UserKeySet);
            X509Certificate2 certificate = null;
            foreach (X509Certificate2 element in certificateCollection)
            {
                if (certificate == null && element.HasPrivateKey)
                {
                    certificate = element;
                }
                else
                {
                    element.Dispose();
                }
            }

            if (certificate == null)
            {
                throw new FileNotFoundException("" % certificateFilePath % " did not contain any certificate with a private key.");
            }

            return certificate;
        }
    }
}


